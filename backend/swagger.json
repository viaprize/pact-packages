{
  "openapi": "3.0.1",
  "servers": [
    {
      "url": "http://localhost:3001/api",
      "description": "Local server"
    },
    {
      "url": "https://api.pactsmith.com/api",
      "description": "Prod Server"
    }
  ],
  "info": {
    "version": "0.0.1",
    "title": "nestjs-boilerplate",
    "description": "",
    "license": {
      "name": "UNLICENSED"
    }
  },
  "paths": {
    "/pacts": {
      "post": {
        "tags": [],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePact"
              }
            }
          },
          "required": true,
          "x-nestia-encrypted": false
        },
        "responses": {
          "201": {
            "description": "The created pact object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pact"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "x-nestia-namespace": "pacts.create",
        "x-nestia-jsDocTags": [
          {
            "name": "summary",
            "text": [
              {
                "text": "Create Pact by passing pact data",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "createUserType",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "- The user creation Interface.",
                "kind": "text"
              }
            ]
          },
          {
            "name": "see",
            "text": [
              {
                "text": "{CreatePact}",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "The created pact object.",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "POST"
      }
    },
    "/pacts/{address}": {
      "get": {
        "tags": [],
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all pacts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pact.Nullable"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "x-nestia-namespace": "pacts.findOne",
        "x-nestia-jsDocTags": [
          {
            "name": "summary",
            "text": [
              {
                "text": "Get all pacts of application",
                "kind": "text"
              }
            ]
          },
          {
            "name": "see",
            "text": [
              {
                "text": "{Pact}",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "Returns all pacts",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "GET"
      }
    },
    "/portals": {
      "post": {
        "tags": [],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePortalDto"
              }
            }
          },
          "required": true,
          "x-nestia-encrypted": false
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portals"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "x-nestia-namespace": "portals.createPortal",
        "x-nestia-jsDocTags": [],
        "x-nestia-method": "POST"
      },
      "get": {
        "tags": [],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "number"
            },
            "description": "",
            "required": true
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "number"
            },
            "description": "",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": ">}",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Readonly__type"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "Get all Portals",
        "description": "The code snippet you provided is a method in the `PortalsController` class. It is a route handler\nfor the GET request to `/portals` endpoint. Here's a breakdown of what it does:\nGets page",
        "x-nestia-namespace": "portals.getPortals",
        "x-nestia-jsDocTags": [
          {
            "name": "summary",
            "text": [
              {
                "text": "Get all Portals",
                "kind": "text"
              }
            ]
          },
          {
            "name": "date",
            "text": [
              {
                "text": "9/25/2023 - 4:06:45 AM",
                "kind": "text"
              }
            ]
          },
          {
            "name": "async"
          },
          {
            "name": "param",
            "text": [
              {
                "text": "",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "1} this is the page number of the return pending proposals",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "10} this is the limit of the return type of the pending proposals",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": ">}",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "GET"
      }
    },
    "/portals/{id}": {
      "get": {
        "tags": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalWithBalance"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "x-nestia-namespace": "portals.getPortal",
        "x-nestia-jsDocTags": [],
        "x-nestia-method": "GET"
      }
    },
    "/portals/proposals": {
      "get": {
        "tags": [],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "number"
            },
            "description": "",
            "required": true
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "number"
            },
            "description": "",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Readonly__type.o1"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "Get all Pending proposals",
        "description": "The code snippet you provided is a method in the `PortalsController` class. It is a route handler\nfor the GET request to `/proposals` endpoint. Here's a breakdown of what it does:\nGets page",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "portals.proposals.getPendingProposals",
        "x-nestia-jsDocTags": [
          {
            "name": "summary",
            "text": [
              {
                "text": "Get all Pending proposals",
                "kind": "text"
              }
            ]
          },
          {
            "name": "date",
            "text": [
              {
                "text": "9/25/2023 - 4:06:45 AM",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "async"
          },
          {
            "name": "param",
            "text": [
              {
                "text": "",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "1} this is the page number of the return pending proposals",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "10} this is the limit of the return type of the pending proposals",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns"
          }
        ],
        "x-nestia-method": "GET"
      },
      "post": {
        "tags": [],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePortalProposalDto"
              }
            }
          },
          "required": true,
          "x-nestia-encrypted": false
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalProposals"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "Create a new proposal using user auth token to know which user is calling this function and sends email to user",
        "description": "The code snippet you provided is a method in the `PortalsController` class. It is a route handler\nfor the POST request to `/proposals` endpoint. Here's a breakdown of what it does:",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "portals.proposals.create",
        "x-nestia-jsDocTags": [
          {
            "name": "summary",
            "text": [
              {
                "text": "Create a new proposal using user auth token to know which user is calling this function and sends email to user",
                "kind": "text"
              }
            ]
          },
          {
            "name": "date",
            "text": [
              {
                "text": "9/25/2023 - 4:44:05 AM",
                "kind": "text"
              }
            ]
          },
          {
            "name": "async"
          },
          {
            "name": "param",
            "text": [
              {
                "text": "createPortalProposalDto",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns"
          }
        ],
        "x-nestia-method": "POST"
      }
    },
    "/portals/proposals/accept": {
      "get": {
        "tags": [],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "number"
            },
            "description": "",
            "required": true
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "number"
            },
            "description": "",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Readonly__type.o2"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "Retrieve a list of accepted Portal proposals\ndescription: Retrieve a list of accepted Portal proposals. The list supports pagination.\nparameters",
        "description": "The code snippet you provided is a method in the `PortalsController` class. It is a route handler\nfor the GET request to `/proposals/accept` endpoint. Here's a breakdown of what it does:\nGets page",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "portals.proposals.accept.getAcceptedProposals",
        "x-nestia-jsDocTags": [
          {
            "name": "summary",
            "text": [
              {
                "text": "Retrieve a list of accepted Portal proposals\ndescription: Retrieve a list of accepted Portal proposals. The list supports pagination.\nparameters",
                "kind": "text"
              }
            ]
          },
          {
            "name": "date",
            "text": [
              {
                "text": "9/25/2023 - 4:06:45 AM",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "async"
          },
          {
            "name": "param",
            "text": [
              {
                "text": "",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "1} this is the page number of the return pending proposals",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "10} this is the limit of the return type of the pending proposals",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns"
          }
        ],
        "x-nestia-method": "GET"
      }
    },
    "/portals/proposals/user/{username}": {
      "get": {
        "tags": [],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "number"
            },
            "description": "",
            "required": true
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "number"
            },
            "description": "",
            "required": true
          },
          {
            "name": "username",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Readonly__type.o3"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "Get all proposals of users by username,",
        "description": "Get all proposals  of user  by username",
        "x-nestia-namespace": "portals.proposals.user.getProposalsByUsername",
        "x-nestia-jsDocTags": [
          {
            "name": "date",
            "text": [
              {
                "text": "9/25/2023 - 4:47:51 AM",
                "kind": "text"
              }
            ]
          },
          {
            "name": "summary",
            "text": [
              {
                "text": "Get all proposals of users by username,",
                "kind": "text"
              }
            ]
          },
          {
            "name": "async"
          },
          {
            "name": "param",
            "text": [
              {
                "text": "",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "1} this is the page number of the return pending proposals",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "10} this is the limit of the return type of the pending proposals",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "userId",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns"
          }
        ],
        "x-nestia-method": "GET"
      }
    },
    "/portals/proposals/reject/{id}": {
      "post": {
        "tags": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RejectProposalDto"
              }
            }
          },
          "required": true,
          "x-nestia-encrypted": false
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Http200Response"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "Reject Proposal,",
        "description": "Admin Reject proposal",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "portals.proposals.reject.rejectProposal",
        "x-nestia-jsDocTags": [
          {
            "name": "date",
            "text": [
              {
                "text": "9/25/2023 - 5:19:58 AM",
                "kind": "text"
              }
            ]
          },
          {
            "name": "summary",
            "text": [
              {
                "text": "Reject Proposal,",
                "kind": "text"
              }
            ]
          },
          {
            "name": "async"
          },
          {
            "name": "param",
            "text": [
              {
                "text": "id",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "rejectProposalDto",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns"
          }
        ],
        "x-nestia-method": "POST"
      }
    },
    "/portals/proposals/accept/{id}": {
      "post": {
        "tags": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Http200Response"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "The function `approveProposal` is an asynchronous function that takes an `id` parameter and calls\nthe `approve` method of the `portalProposalsService` with the given `id`",
        "description": "The function `approveProposal` is an asynchronous function that takes an `id` parameter and calls\nthe `approve` method of the `portalProposalsService` with the given `id`. and it approves the proposal\nand sends an email of approval",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "portals.proposals.accept.approveProposal",
        "x-nestia-jsDocTags": [
          {
            "name": "date",
            "text": [
              {
                "text": "9/25/2023 - 5:35:35 AM",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "async"
          },
          {
            "name": "param",
            "text": [
              {
                "text": "id",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns"
          }
        ],
        "x-nestia-method": "POST"
      }
    },
    "/prizes/submission/{id}": {
      "get": {
        "tags": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Submission"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "x-nestia-namespace": "prizes.submission.getSubmission",
        "x-nestia-jsDocTags": [],
        "x-nestia-method": "GET"
      }
    },
    "/prizes": {
      "post": {
        "tags": [],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePrizeDto"
              }
            }
          },
          "required": true,
          "x-nestia-encrypted": false
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Prize"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "x-nestia-namespace": "prizes.createPrize",
        "x-nestia-jsDocTags": [],
        "x-nestia-method": "POST"
      },
      "get": {
        "tags": [],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "number"
            },
            "description": "",
            "required": true
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "number"
            },
            "description": "",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": ">}",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Readonly__type.o4"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "Get all Prizes",
        "description": "The code snippet you provided is a method in the `PrizesController` class. It is a route handler\nfor the GET request to `/prizes` endpoint. Here's a breakdown of what it does:\nGets page",
        "x-nestia-namespace": "prizes.getPrizes",
        "x-nestia-jsDocTags": [
          {
            "name": "summary",
            "text": [
              {
                "text": "Get all Prizes",
                "kind": "text"
              }
            ]
          },
          {
            "name": "date",
            "text": [
              {
                "text": "9/25/2023 - 4:06:45 AM",
                "kind": "text"
              }
            ]
          },
          {
            "name": "async"
          },
          {
            "name": "param",
            "text": [
              {
                "text": "",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "1} this is the page number of the return pending proposals",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "10} this is the limit of the return type of the pending proposals",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": ">}",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "GET"
      }
    },
    "/prizes/{id}": {
      "get": {
        "tags": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrizeWithBlockchainData"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "x-nestia-namespace": "prizes.getPrize",
        "x-nestia-jsDocTags": [],
        "x-nestia-method": "GET"
      }
    },
    "/prizes/{id}/submission": {
      "post": {
        "tags": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSubmissionDto"
              }
            }
          },
          "required": true,
          "x-nestia-encrypted": false
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Http200Response"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "x-nestia-namespace": "prizes.submission.submit",
        "x-nestia-jsDocTags": [],
        "x-nestia-method": "POST"
      },
      "get": {
        "tags": [],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "number"
            },
            "description": "",
            "required": true
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "number"
            },
            "description": "",
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Readonly__type.o5"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "x-nestia-namespace": "prizes.submission.getSubmissions",
        "x-nestia-jsDocTags": [],
        "x-nestia-method": "GET"
      }
    },
    "/prizes/proposals": {
      "get": {
        "tags": [],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "number"
            },
            "description": "",
            "required": true
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "number"
            },
            "description": "",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Readonly__type.o6"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "Get all Pending proposals",
        "description": "The code snippet you provided is a method in the `PrizesController` class. It is a route handler\nfor the GET request to `/proposals` endpoint. Here's a breakdown of what it does:\nGets page",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "prizes.proposals.getPendingProposals",
        "x-nestia-jsDocTags": [
          {
            "name": "summary",
            "text": [
              {
                "text": "Get all Pending proposals",
                "kind": "text"
              }
            ]
          },
          {
            "name": "date",
            "text": [
              {
                "text": "9/25/2023 - 4:06:45 AM",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "async"
          },
          {
            "name": "param",
            "text": [
              {
                "text": "",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "1} this is the page number of the return pending proposals",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "10} this is the limit of the return type of the pending proposals",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns"
          }
        ],
        "x-nestia-method": "GET"
      },
      "post": {
        "tags": [],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePrizeProposalDto"
              }
            }
          },
          "required": true,
          "x-nestia-encrypted": false
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrizeProposals"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "Create a new proposal using user auth token to know which user is calling this function and sends email to user",
        "description": "The code snippet you provided is a method in the `PrizesController` class. It is a route handler\nfor the POST request to `/proposals` endpoint. Here's a breakdown of what it does:",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "prizes.proposals.create",
        "x-nestia-jsDocTags": [
          {
            "name": "summary",
            "text": [
              {
                "text": "Create a new proposal using user auth token to know which user is calling this function and sends email to user",
                "kind": "text"
              }
            ]
          },
          {
            "name": "date",
            "text": [
              {
                "text": "9/25/2023 - 4:44:05 AM",
                "kind": "text"
              }
            ]
          },
          {
            "name": "async"
          },
          {
            "name": "param",
            "text": [
              {
                "text": "createPrizeProposalDto",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns"
          }
        ],
        "x-nestia-method": "POST"
      }
    },
    "/prizes/proposals/accept": {
      "get": {
        "tags": [],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "number"
            },
            "description": "",
            "required": true
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "number"
            },
            "description": "",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Readonly__type.o7"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "Retrieve a list of accepted prize proposals\ndescription: Retrieve a list of accepted prize proposals. The list supports pagination.\nparameters",
        "description": "The code snippet you provided is a method in the `PrizesController` class. It is a route handler\nfor the GET request to `/proposals/accept` endpoint. Here's a breakdown of what it does:\nGets page",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "prizes.proposals.accept.getAcceptedProposals",
        "x-nestia-jsDocTags": [
          {
            "name": "summary",
            "text": [
              {
                "text": "Retrieve a list of accepted prize proposals\ndescription: Retrieve a list of accepted prize proposals. The list supports pagination.\nparameters",
                "kind": "text"
              }
            ]
          },
          {
            "name": "date",
            "text": [
              {
                "text": "9/25/2023 - 4:06:45 AM",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "async"
          },
          {
            "name": "param",
            "text": [
              {
                "text": "",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "1} this is the page number of the return pending proposals",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "10} this is the limit of the return type of the pending proposals",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns"
          }
        ],
        "x-nestia-method": "GET"
      }
    },
    "/prizes/proposals/user/{username}": {
      "get": {
        "tags": [],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "number"
            },
            "description": "",
            "required": true
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "number"
            },
            "description": "",
            "required": true
          },
          {
            "name": "username",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Readonly__type.o8"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "Get all proposals of users by username,",
        "description": "Get all proposals  of user  by username",
        "x-nestia-namespace": "prizes.proposals.user.getProposalsByUsername",
        "x-nestia-jsDocTags": [
          {
            "name": "date",
            "text": [
              {
                "text": "9/25/2023 - 4:47:51 AM",
                "kind": "text"
              }
            ]
          },
          {
            "name": "summary",
            "text": [
              {
                "text": "Get all proposals of users by username,",
                "kind": "text"
              }
            ]
          },
          {
            "name": "async"
          },
          {
            "name": "param",
            "text": [
              {
                "text": "",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "1} this is the page number of the return pending proposals",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "10} this is the limit of the return type of the pending proposals",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "userId",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns"
          }
        ],
        "x-nestia-method": "GET"
      }
    },
    "/prizes/proposals/reject/{id}": {
      "post": {
        "tags": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RejectProposalDto"
              }
            }
          },
          "required": true,
          "x-nestia-encrypted": false
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Http200Response"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "Reject Proposal,",
        "description": "Admin Reject proposal",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "prizes.proposals.reject.rejectProposal",
        "x-nestia-jsDocTags": [
          {
            "name": "date",
            "text": [
              {
                "text": "9/25/2023 - 5:19:58 AM",
                "kind": "text"
              }
            ]
          },
          {
            "name": "summary",
            "text": [
              {
                "text": "Reject Proposal,",
                "kind": "text"
              }
            ]
          },
          {
            "name": "async"
          },
          {
            "name": "param",
            "text": [
              {
                "text": "id",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "rejectProposalDto",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns"
          }
        ],
        "x-nestia-method": "POST"
      }
    },
    "/prizes/proposals/accept/{id}": {
      "post": {
        "tags": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Http200Response"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "The function `approveProposal` is an asynchronous function that takes an `id` parameter and calls\nthe `approve` method of the `prizeProposalsService` with the given `id`",
        "description": "The function `approveProposal` is an asynchronous function that takes an `id` parameter and calls\nthe `approve` method of the `prizeProposalsService` with the given `id`. and it approves the proposal\nand sends an email of approval",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "prizes.proposals.accept.approveProposal",
        "x-nestia-jsDocTags": [
          {
            "name": "date",
            "text": [
              {
                "text": "9/25/2023 - 5:35:35 AM",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "async"
          },
          {
            "name": "param",
            "text": [
              {
                "text": "id",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns"
          }
        ],
        "x-nestia-method": "POST"
      }
    },
    "/users": {
      "post": {
        "tags": [],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUser"
              }
            }
          },
          "required": true,
          "x-nestia-encrypted": false
        },
        "responses": {
          "201": {
            "description": "The created user object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "Creates a new user and sends welcome email",
        "description": "Creates a new user and sends welcome email.",
        "x-nestia-namespace": "users.create",
        "x-nestia-jsDocTags": [
          {
            "name": "see",
            "text": [
              {
                "text": "{",
                "kind": "text"
              }
            ]
          },
          {
            "name": "link",
            "text": [
              {
                "text": "MailService }",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "createUserType",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "- The user creation Interface.",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "The created user object.",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "POST"
      }
    },
    "/users/{authId}": {
      "get": {
        "tags": [],
        "parameters": [
          {
            "name": "authId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The user object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "Get a user by ID",
        "description": "Get a user by ID.",
        "x-nestia-namespace": "users.findOneByAuthId",
        "x-nestia-jsDocTags": [
          {
            "name": "returns",
            "text": [
              {
                "text": "The user object.",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "GET"
      }
    },
    "/users/username/{username}": {
      "get": {
        "tags": [],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The user object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "Get a user by username",
        "description": "Get a user by username.",
        "x-nestia-namespace": "users.username.findOneByUsername",
        "x-nestia-jsDocTags": [
          {
            "name": "returns",
            "text": [
              {
                "text": "The user object.",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "GET"
      }
    },
    "/users/exists/{username}": {
      "get": {
        "tags": [],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "The username to check.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A boolean indicating if the user exists.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "Endpoint for checking if a user with the specified username exists",
        "description": "Endpoint for checking if a user with the specified username exists.",
        "x-nestia-namespace": "users.exists.exists",
        "x-nestia-jsDocTags": [
          {
            "name": "param",
            "text": [
              {
                "text": "username",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "The username to check.",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "A boolean indicating if the user exists.",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "GET"
      }
    },
    "/users/username/{username}/submissions": {
      "get": {
        "tags": [],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "The username to check.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The submission object.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Submission"
                  }
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "Endpoint for getting submission of a specified username",
        "description": "Endpoint for getting submission of a specified username.",
        "x-nestia-namespace": "users.username.submissions.getSubmissions",
        "x-nestia-jsDocTags": [
          {
            "name": "param",
            "text": [
              {
                "text": "username",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "The username to check.",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "The submission object.",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "GET"
      }
    },
    "/users/username/{username}/prizes": {
      "get": {
        "tags": [],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "The username to check.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The prize object.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Prize"
                  }
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "Endpoint for getting prizes of a specified username",
        "description": "Endpoint for getting prizes of a specified username.",
        "x-nestia-namespace": "users.username.prizes.getPrizes",
        "x-nestia-jsDocTags": [
          {
            "name": "param",
            "text": [
              {
                "text": "username",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "The username to check.",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "The prize object.",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "GET"
      }
    }
  },
  "components": {
    "schemas": {
      "CreatePact": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Name of the pact i.e the title, which is gotten in the pact form",
            "x-typia-jsDocTags": [
              {
                "name": "example",
                "text": [
                  {
                    "text": "johnsmith",
                    "kind": "text"
                  }
                ]
              }
            ],
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "terms": {
            "description": "Terms of the pact i.e the Description",
            "x-typia-jsDocTags": [
              {
                "name": "example",
                "text": [
                  {
                    "text": "test",
                    "kind": "text"
                  }
                ]
              }
            ],
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "address": {
            "description": "Address of the pact on the blockchain",
            "x-typia-jsDocTags": [
              {
                "name": "example",
                "text": [
                  {
                    "text": "0xe7399b79838acc8caaa567fF84e5EFd0d11BB010",
                    "kind": "text"
                  }
                ]
              }
            ],
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string",
            "maxLength": 44,
            "x-typia-typeTags": [
              {
                "target": "string",
                "name": "MaxLength<44>",
                "kind": "maxLength",
                "value": 44,
                "validate": "$input.length <= 44",
                "exclusive": true
              }
            ]
          },
          "transactionHash": {
            "description": "Transaction hash of the pact on the blockchain",
            "x-typia-jsDocTags": [
              {
                "name": "example",
                "text": [
                  {
                    "text": "0x2e8937d96e633c82df2f8f5a19aafa132795496cd98d0ca3d3c336a6c79f09e4",
                    "kind": "text"
                  }
                ]
              }
            ],
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string",
            "maxLength": 66,
            "x-typia-typeTags": [
              {
                "target": "string",
                "name": "MaxLength<66>",
                "kind": "maxLength",
                "value": 66,
                "validate": "$input.length <= 66",
                "exclusive": true
              }
            ]
          },
          "blockHash": {
            "description": "Block hash of the pact on the blockchain",
            "x-typia-jsDocTags": [
              {
                "name": "example",
                "text": [
                  {
                    "text": "0x2e8937d96e633c82df2f8f5a19aafa132795496cd98d0ca3d3c336a6c79f09e4",
                    "kind": "text"
                  }
                ]
              }
            ],
            "x-typia-required": false,
            "x-typia-optional": true,
            "type": "string"
          }
        },
        "nullable": false,
        "required": [
          "name",
          "terms",
          "address",
          "transactionHash"
        ],
        "description": "Interface of Create Pactt , using this interface it create a new pact in pact.service.ts",
        "x-typia-jsDocTags": [
          {
            "name": "see",
            "text": [
              {
                "text": "",
                "kind": "text"
              },
              {
                "text": "{@link ",
                "kind": "link"
              },
              {
                "text": "PactsService ",
                "kind": "linkText"
              },
              {
                "text": "}",
                "kind": "link"
              }
            ]
          }
        ]
      },
      "Pact": {
        "type": "object",
        "properties": {
          "id": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "number"
          },
          "name": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "terms": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "address": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "transactionHash": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "blockHash": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          }
        },
        "nullable": false,
        "required": [
          "id",
          "name",
          "terms",
          "address",
          "transactionHash",
          "blockHash"
        ],
        "x-typia-jsDocTags": []
      },
      "Pact.Nullable": {
        "type": "object",
        "properties": {
          "id": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "number"
          },
          "name": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "terms": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "address": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "transactionHash": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "blockHash": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          }
        },
        "nullable": true,
        "required": [
          "id",
          "name",
          "terms",
          "address",
          "transactionHash",
          "blockHash"
        ],
        "x-typia-jsDocTags": []
      },
      "CreatePortalDto": {
        "type": "object",
        "properties": {
          "address": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "proposal_id": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          }
        },
        "nullable": false,
        "required": [
          "address",
          "proposal_id"
        ],
        "x-typia-jsDocTags": []
      },
      "Portals": {
        "type": "object",
        "properties": {
          "id": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "description": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "slug": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "sendImmediately": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "boolean"
          },
          "fundingGoal": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "number"
          },
          "isMultiSignatureReciever": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "boolean"
          },
          "deadline": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string",
            "format": "date-time"
          },
          "allowDonationAboveThreshold": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "boolean"
          },
          "termsAndCondition": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "proposer_address": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "contract_address": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "treasurers": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "array",
            "items": {
              "x-typia-required": true,
              "x-typia-optional": false,
              "type": "string"
            }
          },
          "tags": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "array",
            "items": {
              "x-typia-required": true,
              "x-typia-optional": false,
              "type": "string"
            }
          },
          "createdAt": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string",
            "format": "date-time"
          },
          "images": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "array",
            "items": {
              "x-typia-required": true,
              "x-typia-optional": false,
              "type": "string"
            }
          },
          "title": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        },
        "nullable": false,
        "required": [
          "id",
          "description",
          "slug",
          "sendImmediately",
          "fundingGoal",
          "isMultiSignatureReciever",
          "deadline",
          "allowDonationAboveThreshold",
          "termsAndCondition",
          "proposer_address",
          "contract_address",
          "treasurers",
          "tags",
          "createdAt",
          "updatedAt",
          "images",
          "title",
          "user"
        ],
        "x-typia-jsDocTags": []
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "email": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "bio": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "authId": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "name": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "username": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "isAdmin": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "boolean"
          },
          "submissions": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Submission"
            }
          },
          "prizeProposals": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PrizeProposals"
            }
          },
          "prizes": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Prize"
            }
          },
          "portals": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Portals"
            }
          },
          "portalProposals": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortalProposals"
            }
          }
        },
        "nullable": false,
        "required": [
          "id",
          "email",
          "bio",
          "authId",
          "name",
          "username",
          "isAdmin",
          "submissions",
          "prizeProposals",
          "prizes",
          "portals",
          "portalProposals"
        ],
        "x-typia-jsDocTags": []
      },
      "Submission": {
        "type": "object",
        "properties": {
          "id": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "submissionDescription": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "submissionHash": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "submitterAddress": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "created_at": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string",
            "format": "date-time"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "prize": {
            "$ref": "#/components/schemas/Prize"
          }
        },
        "nullable": false,
        "required": [
          "id",
          "submissionDescription",
          "submissionHash",
          "submitterAddress",
          "created_at",
          "user",
          "prize"
        ],
        "x-typia-jsDocTags": []
      },
      "Prize": {
        "type": "object",
        "properties": {
          "id": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "description": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "isAutomatic": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "boolean"
          },
          "submissionTime": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "number"
          },
          "votingTime": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "number"
          },
          "startVotingDate": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string",
            "format": "date-time"
          },
          "startSubmissionDate": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string",
            "format": "date-time"
          },
          "proposer_address": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "contract_address": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "admins": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "array",
            "items": {
              "x-typia-required": true,
              "x-typia-optional": false,
              "type": "string"
            }
          },
          "proficiencies": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "array",
            "items": {
              "x-typia-required": true,
              "x-typia-optional": false,
              "type": "string"
            }
          },
          "priorities": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "array",
            "items": {
              "x-typia-required": true,
              "x-typia-optional": false,
              "type": "string"
            }
          },
          "created_at": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string",
            "format": "date-time"
          },
          "images": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "array",
            "items": {
              "x-typia-required": true,
              "x-typia-optional": false,
              "type": "string"
            }
          },
          "title": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "submissions": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Submission"
            }
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        },
        "nullable": false,
        "required": [
          "id",
          "description",
          "isAutomatic",
          "submissionTime",
          "votingTime",
          "startVotingDate",
          "startSubmissionDate",
          "proposer_address",
          "contract_address",
          "admins",
          "proficiencies",
          "priorities",
          "created_at",
          "updated_at",
          "images",
          "title",
          "submissions",
          "user"
        ],
        "x-typia-jsDocTags": []
      },
      "PrizeProposals": {
        "type": "object",
        "properties": {
          "id": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "voting_time": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "number"
          },
          "submission_time": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "number"
          },
          "admins": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "array",
            "items": {
              "x-typia-required": true,
              "x-typia-optional": false,
              "type": "string"
            }
          },
          "isApproved": {
            "description": "The Columns here are not part of the smart contract",
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "boolean"
          },
          "isRejected": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "boolean"
          },
          "title": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "description": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "isAutomatic": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "boolean"
          },
          "startVotingDate": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string",
            "format": "date-time"
          },
          "startSubmissionDate": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string",
            "format": "date-time"
          },
          "proficiencies": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "array",
            "items": {
              "x-typia-required": true,
              "x-typia-optional": false,
              "type": "string"
            }
          },
          "priorities": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "array",
            "items": {
              "x-typia-required": true,
              "x-typia-optional": false,
              "type": "string"
            }
          },
          "images": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "array",
            "items": {
              "x-typia-required": true,
              "x-typia-optional": false,
              "type": "string"
            }
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        },
        "nullable": false,
        "required": [
          "id",
          "voting_time",
          "submission_time",
          "admins",
          "isApproved",
          "isRejected",
          "title",
          "description",
          "isAutomatic",
          "startVotingDate",
          "startSubmissionDate",
          "proficiencies",
          "priorities",
          "images",
          "user"
        ],
        "x-typia-jsDocTags": []
      },
      "PortalProposals": {
        "type": "object",
        "properties": {
          "id": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "description": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "slug": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "fundingGoal": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "number"
          },
          "isMultiSignatureReciever": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "boolean"
          },
          "deadline": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string",
            "format": "date-time"
          },
          "sendImmediately": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "boolean"
          },
          "allowDonationAboveThreshold": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "boolean"
          },
          "termsAndCondition": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "proposerAddress": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "treasurers": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "array",
            "items": {
              "x-typia-required": true,
              "x-typia-optional": false,
              "type": "string"
            }
          },
          "tags": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "array",
            "items": {
              "x-typia-required": true,
              "x-typia-optional": false,
              "type": "string"
            }
          },
          "isApproved": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "boolean"
          },
          "isRejected": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "boolean"
          },
          "createdAt": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string",
            "format": "date-time"
          },
          "images": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "array",
            "items": {
              "x-typia-required": true,
              "x-typia-optional": false,
              "type": "string"
            }
          },
          "title": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        },
        "nullable": false,
        "required": [
          "id",
          "description",
          "slug",
          "fundingGoal",
          "isMultiSignatureReciever",
          "deadline",
          "sendImmediately",
          "allowDonationAboveThreshold",
          "termsAndCondition",
          "proposerAddress",
          "treasurers",
          "tags",
          "isApproved",
          "isRejected",
          "createdAt",
          "updatedAt",
          "images",
          "title",
          "user"
        ],
        "x-typia-jsDocTags": []
      },
      "Readonly__type": {
        "type": "object",
        "properties": {
          "data": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortalWithBalance"
            }
          },
          "hasNextPage": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "boolean"
          }
        },
        "nullable": false,
        "required": [
          "data",
          "hasNextPage"
        ],
        "description": "Make all properties in T readonly",
        "x-typia-jsDocTags": []
      },
      "PortalWithBalance": {
        "type": "object",
        "properties": {
          "balance": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "number"
          },
          "id": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "description": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "slug": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "sendImmediately": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "boolean"
          },
          "fundingGoal": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "number"
          },
          "isMultiSignatureReciever": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "boolean"
          },
          "deadline": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string",
            "format": "date-time"
          },
          "allowDonationAboveThreshold": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "boolean"
          },
          "termsAndCondition": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "proposer_address": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "contract_address": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "treasurers": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "array",
            "items": {
              "x-typia-required": true,
              "x-typia-optional": false,
              "type": "string"
            }
          },
          "tags": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "array",
            "items": {
              "x-typia-required": true,
              "x-typia-optional": false,
              "type": "string"
            }
          },
          "createdAt": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string",
            "format": "date-time"
          },
          "images": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "array",
            "items": {
              "x-typia-required": true,
              "x-typia-optional": false,
              "type": "string"
            }
          },
          "title": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        },
        "nullable": false,
        "required": [
          "balance",
          "id",
          "description",
          "slug",
          "sendImmediately",
          "fundingGoal",
          "isMultiSignatureReciever",
          "deadline",
          "allowDonationAboveThreshold",
          "termsAndCondition",
          "proposer_address",
          "contract_address",
          "treasurers",
          "tags",
          "createdAt",
          "updatedAt",
          "images",
          "title",
          "user"
        ],
        "x-typia-jsDocTags": []
      },
      "Readonly__type.o1": {
        "type": "object",
        "properties": {
          "data": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortalProposals"
            }
          },
          "hasNextPage": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "boolean"
          }
        },
        "nullable": false,
        "required": [
          "data",
          "hasNextPage"
        ],
        "description": "Make all properties in T readonly",
        "x-typia-jsDocTags": []
      },
      "Readonly__type.o2": {
        "type": "object",
        "properties": {
          "data": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortalProposals"
            }
          },
          "hasNextPage": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "boolean"
          }
        },
        "nullable": false,
        "required": [
          "data",
          "hasNextPage"
        ],
        "description": "Make all properties in T readonly",
        "x-typia-jsDocTags": []
      },
      "CreatePortalProposalDto": {
        "type": "object",
        "properties": {
          "description": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "fundingGoal": {
            "x-typia-required": false,
            "x-typia-optional": true,
            "type": "number"
          },
          "isMultiSignatureReciever": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "boolean"
          },
          "sendImmediately": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "boolean"
          },
          "deadline": {
            "x-typia-required": false,
            "x-typia-optional": true,
            "type": "string",
            "format": "date-time"
          },
          "allowDonationAboveThreshold": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "boolean"
          },
          "termsAndCondition": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "proposerAddress": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "treasurers": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "array",
            "items": {
              "x-typia-required": true,
              "x-typia-optional": false,
              "type": "string"
            }
          },
          "tags": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "array",
            "items": {
              "x-typia-required": true,
              "x-typia-optional": false,
              "type": "string"
            }
          },
          "images": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "array",
            "items": {
              "x-typia-required": true,
              "x-typia-optional": false,
              "type": "string"
            }
          },
          "title": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          }
        },
        "nullable": false,
        "required": [
          "description",
          "isMultiSignatureReciever",
          "sendImmediately",
          "allowDonationAboveThreshold",
          "termsAndCondition",
          "proposerAddress",
          "treasurers",
          "tags",
          "images",
          "title"
        ],
        "x-typia-jsDocTags": []
      },
      "Readonly__type.o3": {
        "type": "object",
        "properties": {
          "data": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortalProposals"
            }
          },
          "hasNextPage": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "boolean"
          }
        },
        "nullable": false,
        "required": [
          "data",
          "hasNextPage"
        ],
        "description": "Make all properties in T readonly",
        "x-typia-jsDocTags": []
      },
      "RejectProposalDto": {
        "type": "object",
        "properties": {
          "comment": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          }
        },
        "nullable": false,
        "required": [
          "comment"
        ],
        "x-typia-jsDocTags": []
      },
      "Http200Response": {
        "type": "object",
        "properties": {
          "message": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          }
        },
        "nullable": false,
        "required": [
          "message"
        ],
        "x-typia-jsDocTags": []
      },
      "CreatePrizeDto": {
        "type": "object",
        "properties": {
          "address": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "proposal_id": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          }
        },
        "nullable": false,
        "required": [
          "address",
          "proposal_id"
        ],
        "x-typia-jsDocTags": []
      },
      "Readonly__type.o4": {
        "type": "object",
        "properties": {
          "data": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PrizeWithBalance"
            }
          },
          "hasNextPage": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "boolean"
          }
        },
        "nullable": false,
        "required": [
          "data",
          "hasNextPage"
        ],
        "description": "Make all properties in T readonly",
        "x-typia-jsDocTags": []
      },
      "PrizeWithBalance": {
        "type": "object",
        "properties": {
          "balance": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "number"
          },
          "id": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "description": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "isAutomatic": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "boolean"
          },
          "submissionTime": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "number"
          },
          "votingTime": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "number"
          },
          "startVotingDate": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string",
            "format": "date-time"
          },
          "startSubmissionDate": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string",
            "format": "date-time"
          },
          "proposer_address": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "contract_address": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "admins": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "array",
            "items": {
              "x-typia-required": true,
              "x-typia-optional": false,
              "type": "string"
            }
          },
          "proficiencies": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "array",
            "items": {
              "x-typia-required": true,
              "x-typia-optional": false,
              "type": "string"
            }
          },
          "priorities": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "array",
            "items": {
              "x-typia-required": true,
              "x-typia-optional": false,
              "type": "string"
            }
          },
          "created_at": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string",
            "format": "date-time"
          },
          "images": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "array",
            "items": {
              "x-typia-required": true,
              "x-typia-optional": false,
              "type": "string"
            }
          },
          "title": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "submissions": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Submission"
            }
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        },
        "nullable": false,
        "required": [
          "balance",
          "id",
          "description",
          "isAutomatic",
          "submissionTime",
          "votingTime",
          "startVotingDate",
          "startSubmissionDate",
          "proposer_address",
          "contract_address",
          "admins",
          "proficiencies",
          "priorities",
          "created_at",
          "updated_at",
          "images",
          "title",
          "submissions",
          "user"
        ],
        "x-typia-jsDocTags": []
      },
      "PrizeWithBlockchainData": {
        "type": "object",
        "properties": {
          "submission_time_blockchain": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "number"
          },
          "voting_time_blockchain": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "number"
          },
          "balance": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "number"
          },
          "id": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "description": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "isAutomatic": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "boolean"
          },
          "submissionTime": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "number"
          },
          "votingTime": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "number"
          },
          "startVotingDate": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string",
            "format": "date-time"
          },
          "startSubmissionDate": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string",
            "format": "date-time"
          },
          "proposer_address": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "contract_address": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "admins": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "array",
            "items": {
              "x-typia-required": true,
              "x-typia-optional": false,
              "type": "string"
            }
          },
          "proficiencies": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "array",
            "items": {
              "x-typia-required": true,
              "x-typia-optional": false,
              "type": "string"
            }
          },
          "priorities": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "array",
            "items": {
              "x-typia-required": true,
              "x-typia-optional": false,
              "type": "string"
            }
          },
          "created_at": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string",
            "format": "date-time"
          },
          "images": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "array",
            "items": {
              "x-typia-required": true,
              "x-typia-optional": false,
              "type": "string"
            }
          },
          "title": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "submissions": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Submission"
            }
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        },
        "nullable": false,
        "required": [
          "submission_time_blockchain",
          "voting_time_blockchain",
          "balance",
          "id",
          "description",
          "isAutomatic",
          "submissionTime",
          "votingTime",
          "startVotingDate",
          "startSubmissionDate",
          "proposer_address",
          "contract_address",
          "admins",
          "proficiencies",
          "priorities",
          "created_at",
          "updated_at",
          "images",
          "title",
          "submissions",
          "user"
        ],
        "x-typia-jsDocTags": []
      },
      "CreateSubmissionDto": {
        "type": "object",
        "properties": {
          "submissionDescription": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "submissionHash": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "submitterAddress": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          }
        },
        "nullable": false,
        "required": [
          "submissionDescription",
          "submissionHash",
          "submitterAddress"
        ],
        "x-typia-jsDocTags": []
      },
      "Readonly__type.o5": {
        "type": "object",
        "properties": {
          "data": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubmissionWithBlockchainData"
            }
          },
          "hasNextPage": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "boolean"
          }
        },
        "nullable": false,
        "required": [
          "data",
          "hasNextPage"
        ],
        "description": "Make all properties in T readonly",
        "x-typia-jsDocTags": []
      },
      "SubmissionWithBlockchainData": {
        "type": "object",
        "properties": {
          "voting_blockchain": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "number"
          },
          "id": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "submissionDescription": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "submissionHash": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "submitterAddress": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "created_at": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string",
            "format": "date-time"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "prize": {
            "$ref": "#/components/schemas/Prize"
          }
        },
        "nullable": false,
        "required": [
          "voting_blockchain",
          "id",
          "submissionDescription",
          "submissionHash",
          "submitterAddress",
          "created_at",
          "user",
          "prize"
        ],
        "x-typia-jsDocTags": []
      },
      "Readonly__type.o6": {
        "type": "object",
        "properties": {
          "data": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PrizeProposals"
            }
          },
          "hasNextPage": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "boolean"
          }
        },
        "nullable": false,
        "required": [
          "data",
          "hasNextPage"
        ],
        "description": "Make all properties in T readonly",
        "x-typia-jsDocTags": []
      },
      "Readonly__type.o7": {
        "type": "object",
        "properties": {
          "data": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PrizeProposals"
            }
          },
          "hasNextPage": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "boolean"
          }
        },
        "nullable": false,
        "required": [
          "data",
          "hasNextPage"
        ],
        "description": "Make all properties in T readonly",
        "x-typia-jsDocTags": []
      },
      "CreatePrizeProposalDto": {
        "type": "object",
        "properties": {
          "voting_time": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "number"
          },
          "submission_time": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "number"
          },
          "admins": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "array",
            "items": {
              "x-typia-required": true,
              "x-typia-optional": false,
              "type": "string"
            }
          },
          "title": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "description": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "proposer_address": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "isAutomatic": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "boolean"
          },
          "startVotingDate": {
            "x-typia-required": false,
            "x-typia-optional": true,
            "type": "string",
            "format": "date-time"
          },
          "startSubmissionDate": {
            "x-typia-required": false,
            "x-typia-optional": true,
            "type": "string",
            "format": "date-time"
          },
          "proficiencies": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "array",
            "items": {
              "x-typia-required": true,
              "x-typia-optional": false,
              "type": "string",
              "enum": [
                "Programming",
                "Python",
                "JavaScript",
                "Writing",
                "Design",
                "Translation",
                "Research",
                "Real estate",
                "Apps",
                "Hardware",
                "Art",
                "Meta",
                "AI"
              ]
            }
          },
          "priorities": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "array",
            "items": {
              "x-typia-required": true,
              "x-typia-optional": false,
              "type": "string",
              "enum": [
                "Climate change",
                "Network civilizations",
                "Open-source",
                "Community coordination",
                "Health",
                "Education"
              ]
            }
          },
          "images": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "array",
            "items": {
              "x-typia-required": true,
              "x-typia-optional": false,
              "type": "string"
            }
          }
        },
        "nullable": false,
        "required": [
          "voting_time",
          "submission_time",
          "admins",
          "title",
          "description",
          "proposer_address",
          "isAutomatic",
          "proficiencies",
          "priorities",
          "images"
        ],
        "x-typia-jsDocTags": []
      },
      "Readonly__type.o8": {
        "type": "object",
        "properties": {
          "data": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PrizeProposals"
            }
          },
          "hasNextPage": {
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "boolean"
          }
        },
        "nullable": false,
        "required": [
          "data",
          "hasNextPage"
        ],
        "description": "Make all properties in T readonly",
        "x-typia-jsDocTags": []
      },
      "CreateUser": {
        "type": "object",
        "properties": {
          "email": {
            "description": "User's emails which will be used to send emails and futher communication",
            "x-typia-jsDocTags": [
              {
                "name": "example",
                "text": [
                  {
                    "text": "johnsmith@gmail.com",
                    "kind": "text"
                  }
                ]
              }
            ],
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string",
            "format": "email",
            "x-typia-typeTags": [
              {
                "target": "string",
                "name": "Format<\"email\">",
                "kind": "format",
                "value": "email",
                "validate": "/^(([^<>()[\\]\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i.test($input)",
                "exclusive": [
                  "format",
                  "pattern"
                ]
              }
            ]
          },
          "authId": {
            "description": "User Id which is gotten from the auth provider like privy , torus etc...",
            "x-typia-jsDocTags": [
              {
                "name": "example",
                "text": [
                  {
                    "text": "did:lsjfdlk:ljsdlkjsdfkm",
                    "kind": "text"
                  }
                ]
              }
            ],
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string",
            "minLength": 5,
            "x-typia-typeTags": [
              {
                "target": "string",
                "name": "MinLength<5>",
                "kind": "minLength",
                "value": 5,
                "validate": "5 <= $input.length",
                "exclusive": true
              }
            ]
          },
          "name": {
            "description": "The user name which is gotten from the onboarding process or page",
            "x-typia-jsDocTags": [
              {
                "name": "example",
                "text": [
                  {
                    "text": "Johnny Sins",
                    "kind": "text"
                  }
                ]
              }
            ],
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "username": {
            "description": "The username which is gotten from the onboarding process or page and it is unique",
            "x-typia-jsDocTags": [
              {
                "name": "example",
                "text": [
                  {
                    "text": "sins",
                    "kind": "text"
                  }
                ]
              }
            ],
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          },
          "bio": {
            "description": "The user bio which is gotten from the onboarding process or page",
            "x-typia-jsDocTags": [
              {
                "name": "example",
                "text": [
                  {
                    "text": "Hi I am Johnny Sins",
                    "kind": "text"
                  }
                ]
              }
            ],
            "x-typia-required": true,
            "x-typia-optional": false,
            "type": "string"
          }
        },
        "nullable": false,
        "required": [
          "email",
          "authId",
          "name",
          "username",
          "bio"
        ],
        "description": "Interface of Create User , using this interface it create a new user in",
        "x-typia-jsDocTags": [
          {
            "name": "link",
            "text": [
              {
                "text": "../users.service~UsersService",
                "kind": "text"
              }
            ]
          }
        ]
      }
    },
    "securitySchemes": {
      "bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}