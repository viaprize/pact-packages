/**
 * @packageDocumentation
 * @module api.functional.prizes.proposals.accept
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";

/**
 * The function `approveProposal` is an asynchronous function that takes an `id` parameter and calls
 * the `approve` method of the `prizeProposalsService` with the given `id`.
 *
 * @date 9/25/2023 - 5:35:35 AM
 * @security bearer
 * @async
 * @param id
 * @returns
 *
 * @controller PrizesController.approveProposal
 * @path POST /prizes/proposals/accept/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function approveProposal(
  connection: IConnection,
  id: string,
): Promise<void> {
  return PlainFetcher.fetch(connection, {
    ...approveProposal.METADATA,
    path: approveProposal.path(id),
  } as const);
}
export namespace approveProposal {
  export const METADATA = {
    method: "POST",
    path: "/prizes/proposals/accept/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (id: string): string => {
    return `/prizes/proposals/accept/${encodeURIComponent(id ?? "null")}`;
  };
}
