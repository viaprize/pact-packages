/**
 * @packageDocumentation
 * @module api.functional.prizes.proposals
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection, Primitive, Resolved } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";

import type { CreatePrizeProposalDto } from "../../../../../backend/src/prizes/dto/create-prize-proposal.dto";
import type { PrizeProposals } from "../../../../../backend/src/prizes/entities/prize-proposals.entity";
import type {
  __type,
  PrzieQuery,
} from "../../../../../backend/src/prizes/prizes.controller";

export * as user from "./user";
export * as reject from "./reject";
export * as accept from "./accept";

/**
 * The code snippet you provided is a method in the `PrizesController` class. It is a route handler
 * for the GET request to `/proposals` endpoint. Here's a breakdown of what it does:
 * Gets page
 *
 * @summary Get all Pending proposals
 * @date 9/25/2023 - 4:06:45 AM
 * @security bearer
 * @async
 * @param query
 * @returns
 *
 * @controller PrizesController.getPendingProposals
 * @path GET /prizes/proposals
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getPendingProposals(
  connection: IConnection,
  query: getPendingProposals.Query,
): Promise<getPendingProposals.Output> {
  return PlainFetcher.fetch(connection, {
    ...getPendingProposals.METADATA,
    path: getPendingProposals.path(query),
  } as const);
}
export namespace getPendingProposals {
  export type Query = Resolved<PrzieQuery>;
  export type Output = Primitive<Readonly<__type>>;

  export const METADATA = {
    method: "GET",
    path: "/prizes/proposals",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (query: getPendingProposals.Query): string => {
    const variables: Record<any, any> = query as any;
    const search: URLSearchParams = new URLSearchParams();
    for (const [key, value] of Object.entries(variables))
      if (value === undefined) continue;
      else if (Array.isArray(value))
        value.forEach((elem) => search.append(key, String(elem)));
      else search.set(key, String(value));
    const encoded: string = search.toString();
    return `/prizes/proposals${encoded.length ? `?${encoded}` : ""}`;
  };
}

/**
 * The code snippet you provided is a method in the `PrizesController` class. It is a route handler
 * for the POST request to `/proposals` endpoint. Here's a breakdown of what it does:
 *
 * @summary Create a new proposal using user auth token to know which user is calling this function
 * @date 9/25/2023 - 4:44:05 AM
 * @async
 * @param createPrizeProposalDto
 * @security bearer
 * @returns
 *
 * @controller PrizesController.create
 * @path POST /prizes/proposals
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function create(
  connection: IConnection,
  createPrizeProposalDto: create.Input,
): Promise<create.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...(connection.headers ?? {}),
        "Content-Type": "application/json",
      },
    },
    {
      ...create.METADATA,
      path: create.path(),
    } as const,
    createPrizeProposalDto,
  );
}
export namespace create {
  export type Input = Primitive<CreatePrizeProposalDto>;
  export type Output = Primitive<PrizeProposals>;

  export const METADATA = {
    method: "POST",
    path: "/prizes/proposals",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (): string => {
    return `/prizes/proposals`;
  };
}
