/**
 * @packageDocumentation
 * @module api.functional.pacts
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import type { IConnection, Primitive } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";

import type { CreatePact } from "../../../../backend/src/pacts/dto/create-pact.dto";
import type { Pact } from "../../../../backend/src/pacts/entities/pact.entity";

/**
 * 
 * @summary Create Pact by passing pact data
 * @see {CreatePact}
 * @returns The created pact object.
 * 
 * @controller PactsController.create
 * @path POST /pacts
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function create(
    connection: IConnection,
    createPact: create.Input,
): Promise<create.Output> {
    return PlainFetcher.fetch(
        {
            ...connection,
            headers: {
                ...(connection.headers ?? {}),
                "Content-Type": "application/json",
            },
        },
        {
            ...create.METADATA,
            path: create.path(),
        } as const,
        createPact,
    );
}
export namespace create {
    export type Input = Primitive<CreatePact>;
    export type Output = Primitive<Pact>;

    export const METADATA = {
        method: "POST",
        path: "/pacts",
        request: {
            type: "application/json",
            encrypted: false
        },
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (): string => {
        return `/pacts`;
    }
}

/**
 * 
 * @summary Get all pacts of application
 * @see {Pact}
 * @returns Returns all pacts
 * 
 * @controller PactsController.findOne
 * @path GET /pacts/:address
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function findOne(
    connection: IConnection,
    address: string,
): Promise<findOne.Output> {
    return PlainFetcher.fetch(
        connection,
        {
            ...findOne.METADATA,
            path: findOne.path(address),
        } as const,
    );
}
export namespace findOne {
    export type Output = Primitive<null | Pact>;

    export const METADATA = {
        method: "GET",
        path: "/pacts/:address",
        request: null,
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (address: string): string => {
        return `/pacts/${encodeURIComponent(address ?? "null")}`;
    }
}